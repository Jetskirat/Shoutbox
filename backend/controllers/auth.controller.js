import User from "../models/user.model.js";
import bcrypt from "bcryptjs";
import { generateTokenAndSetCookie } from "../lib/utils/generateToken.js";

export const signup= async (req, res) => { 
    console.log('Received request to signup endpoint');
    try{
        console.log('Received request to signup endpoint');
        const {fullName, email, username, password} = req.body;
        const emailRegex= /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if(!emailRegex.test(email)){//checking if email in correct format
            return res.status(400).json({error: "Invalid email format",});
        }

        const existingUser= await User.findOne({username: username});
        if(existingUser){//checking if username already exists
            return res.status(400).json({error: "Username is already taken"});
        }

        const existingEmail= await User.findOne({email: email});
        if(existingEmail){//checking if email is already in use
            return res.status(400).json({error: "Account already exists with this email"});
        }

        const salt= await bcrypt.genSalt(10);//to hash password
        const hashedPassword= await bcrypt.hash(password, salt);

        const newUser= new User({
            fullName, //fullName: fullName
            email, //email: email
            username, //username: username
            password: hashedPassword,
        });

        if(newUser){
            generateTokenAndSetCookie(newUser._id, res);//generating token using user id and setting it in a cookie
            await newUser.save();//giving token to user, who can later use it to remain logged in
        
            res.status(201).json({
                _id:newUser._id,//_id is the id of the user automatically generated by mongodb
                fullName:newUser.fullName,
                email:newUser.email,
                username:newUser.username,
                followers:newUser.followers,
                following:newUser.following,
                profileImg:newUser.profileImg,
                coverImg:newUser.coverImg,
            })
        }
    }
    catch(error){
        console.log("error in signup controller: ", error.message);
        res.status(500).json({error: "Internal server error"});
    }
}

export const login= async (req, res) => { 
    res.json({
        data: "you hit the login endpoint",
    });
}

export const logout= async (req, res) => { 
    res.json({
        data: "you hit the logout endpoint",
    });
}